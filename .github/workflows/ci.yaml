name: "CI"

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]

env:
  COMMITIZEN_VERSION: "2.15.1"
  MARKUPSAFE_VERSION: "2.0.1"
  PYTHON_VERSION: "3.10.1"
  POETRY_VERSION: "1.1.13"

jobs:
  commitizen:
    name: "Check commit message"

    runs-on: "ubuntu-latest"

    steps:
      - uses: "actions/checkout@v2.4.0"

      - name: "Fetch ${{ github.base_ref }}"
        if: "github.event_name == 'pull_request'"
        run: |
          set -euo pipefail

          git fetch --depth=1 origin +refs/heads/${{ github.base_ref }}:refs/heads/${{ github.base_ref }}
          git fetch --prune --unshallow

      - name: "Install Python"
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: "actions/setup-python@v3"
        with:
          python-version: "${{ env.PYTHON_VERSION }}"

      - name: "Install commitizen"
        if: "!startsWith(github.ref, 'refs/tags/')"
        run: "python3 -m pip install commitizen==${{ env.COMMITIZEN_VERSION }}"

      - name: "Install Markupsafe"
        if: "!startsWith(github.ref, 'refs/tags/')"
        run: "python3 -m pip install MarkupSafe==${{ env.MARKUPSAFE_VERSION }}"

      - name: "Check pull request commit messages"
        if: "github.event_name == 'pull_request'"
        run: |
          set -euo pipefail

          for commit in $(git log --pretty=%H ${{ github.base_ref }}..HEAD); do
            echo "Checking commit: ${commit}"
            cz check -m "$(git log -1 --pretty=%B ${commit})"
          done

      - name: "Check last commit message"
        if: "github.event_name != 'pull_request' && !startsWith(github.ref, 'refs/tags/')"
        run: 'cz check -m "$(git log -1 --pretty=%B)"'

  test:
    needs: [ "commitizen" ]
    name: "Test project"

    runs-on: "ubuntu-latest"

    steps:
      - uses: "actions/checkout@v3.0.2"

      - name: "Install Python"
        uses: "actions/setup-python@v3"
        with:
          python-version: "${{ env.PYTHON_VERSION }}"

      - name: "Install poetry"
        run: "python3 -m pip install poetry==${{ env.POETRY_VERSION }}"

      - name: "Cache venv"
        uses: "actions/cache@v3.0.2"
        with:
          path: ".venv"
          key: "venv-${{ hashFiles('poetry.lock') }}"

      - name: "Install project"
        run: "poetry install"

      - name: "Run tests"
        run: "poetry run python3 -m pytest"

      - name: Create Zipfile archive of Dependencies
        run: |
          cd ./.venv/lib/python3.10/site-packages
          zip -r9 ../../../../api.zip .

      - name: "Add App to Zip file"
        run: cd ./app && zip -g ../api.zip -r .

      - name: "Upload zip file artifact"
        uses: actions/upload-artifact@v2
        with:
          name: api
          path: api.zip